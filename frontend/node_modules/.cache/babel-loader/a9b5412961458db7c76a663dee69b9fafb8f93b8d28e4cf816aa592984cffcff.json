{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thi\\u1EBFt k\\u1EBF\\\\mern-encommerce\\\\frontend\\\\src\\\\components\\\\ProductContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductContext = /*#__PURE__*/createContext();\nconst ProductProvider = ({\n  children\n}) => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true); // State for loading\n  const [error, setError] = useState(null); // State for error handling\n\n  // Fetch the product list from API\n  useEffect(() => {\n    fetch('http://localhost:5000/api/products').then(response => response.json()).then(data => {\n      setProducts(data);\n      setLoading(false); // Set loading to false after data is fetched\n    }).catch(error => {\n      setError('Error fetching products. Please try again later.'); // Set error state\n      setLoading(false); // Stop loading if there's an error\n      console.error('Error fetching products:', error);\n    });\n  }, []);\n\n  // Function to update the product list\n  const updateProducts = newProducts => {\n    setProducts(newProducts);\n  };\n  return /*#__PURE__*/_jsxDEV(ProductContext.Provider, {\n    value: {\n      products,\n      updateProducts\n    },\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading products...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this) // Display loading message while data is being fetched\n    : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) // Display error message if there's an issue with fetching\n    : children // Render children components if data is fetched successfully\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductProvider, \"3+N/VFIgZOBgubN9oS5aTzm2qqY=\");\n_c = ProductProvider;\nexport { ProductContext, ProductProvider };\nvar _c;\n$RefreshReg$(_c, \"ProductProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jsxDEV","_jsxDEV","ProductContext","ProductProvider","children","_s","products","setProducts","loading","setLoading","error","setError","fetch","then","response","json","data","catch","console","updateProducts","newProducts","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["D:/Thiết kế/mern-encommerce/frontend/src/components/ProductContext.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\n\n// Create the context\nconst ProductContext = createContext();\n\nconst ProductProvider = ({ children }) => {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true); // State for loading\n  const [error, setError] = useState(null); // State for error handling\n\n  // Fetch the product list from API\n  useEffect(() => {\n    fetch('http://localhost:5000/api/products')\n\n      .then(response => response.json())\n      .then(data => {\n        setProducts(data);\n        setLoading(false); // Set loading to false after data is fetched\n      })\n      .catch(error => {\n        setError('Error fetching products. Please try again later.'); // Set error state\n        setLoading(false); // Stop loading if there's an error\n        console.error('Error fetching products:', error);\n      });\n  }, []);\n\n  // Function to update the product list\n  const updateProducts = (newProducts) => {\n    setProducts(newProducts);\n  };\n\n  return (\n    <ProductContext.Provider value={{ products, updateProducts }}>\n      {loading ? (\n        <div>Loading products...</div> // Display loading message while data is being fetched\n      ) : error ? (\n        <div style={{ color: 'red' }}>{error}</div> // Display error message if there's an issue with fetching\n      ) : (\n        children // Render children components if data is fetched successfully\n      )}\n    </ProductContext.Provider>\n  );\n};\n\nexport { ProductContext, ProductProvider };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGL,aAAa,CAAC,CAAC;AAEtC,MAAMM,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACAD,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,oCAAoC,CAAC,CAExCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZT,WAAW,CAACS,IAAI,CAAC;MACjBP,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CACDQ,KAAK,CAACP,KAAK,IAAI;MACdC,QAAQ,CAAC,kDAAkD,CAAC,CAAC,CAAC;MAC9DF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACnBS,OAAO,CAACR,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,cAAc,GAAIC,WAAW,IAAK;IACtCb,WAAW,CAACa,WAAW,CAAC;EAC1B,CAAC;EAED,oBACEnB,OAAA,CAACC,cAAc,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,QAAQ;MAAEa;IAAe,CAAE;IAAAf,QAAA,EAC1DI,OAAO,gBACNP,OAAA;MAAAG,QAAA,EAAK;IAAmB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC;IAAA,EAC7BhB,KAAK,gBACPT,OAAA;MAAK0B,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAxB,QAAA,EAAEM;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,CAAC;IAAA,EAE5CtB,QAAQ,CAAC;EACV;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACsB,CAAC;AAE9B,CAAC;AAACrB,EAAA,CArCIF,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AAuCrB,SAASD,cAAc,EAAEC,eAAe;AAAG,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}